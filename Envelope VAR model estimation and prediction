# data in paper-UK spirit
expall=read.table("UK spirit.txt", col.names = c("year", "consumption", "income", "price", "price/income"))
expall=expall[, c(2, 3, 4)]
expall=as.matrix(expall)

# create time series plot and log transfermation and differencing for stationary
plot.ts(expall)
logexpall=log(expall)
plot.ts(logexpall)
difflog=logexpall[2:nrow(logexpall),]-logexpall[1:nrow(logexpall)-1,]
plot.ts(difflog)
tsdata = difflog

# split data to train and test datasets
# set split percentage first and get train and test dataset
sp=0.8
n = nrow(tsdata)
split_num = round(n*sp, 0)
train = tsdata[1: split_num,]
test = tsdata[(split_num+1):n ,]

# Var model order selection and model
library("MTS")
# get VAR order by bic
VARorder = VARorder(train)
order=VARorder$bicor
# build VAR model
var_results <- MTS :: VAR(train, order)

# predict test data sequentially by updating model 
var_pred_results <- VARpred(var_results, h=1)
var_pred_values <- t(matrix(var_pred_results$pred))
var_pred_MSE <- t(matrix(var_pred_results$se.err))
var_train <- train

for (i in 1:(nrow(test)-1))
{
  var_train <- rbind(var_train, test[i, ])
  var_results <- MTS :: VAR(var_train, order)
  var_pred_results <- VARpred(var_results, h=1)
  var_pred_values <- rbind(var_pred_values,  t(matrix(var_pred_results$pred)))
  var_pred_MSE <- rbind(var_pred_MSE, t(matrix(var_pred_results$se.err)))
}

# compared predicted value with test data and get squared mean error 
var_mean_square_error = sqrt(mean ((var_pred_values - test)^2))


# envelope model data transformation
data = tsdata
rownames(data) <- NULL
Yts <- data[(order+1):nrow(data),]
rownames(Yts) <- NULL
Xts0 <- c(NA)
for (i in 1:order)
{ 
  rownames(data[(order+1-i):(nrow(data)-i),]) <- NULL
  rownames(Xts0) <- NULL
  Xts0 <- cbind(Xts0,data[(order+1-i):(nrow(data)-i),]) 
  Xts <- Xts0[,c(-1)]
}

# split data into train and test
n1 = nrow(data)
split_num1 = round(n*sp, 0)

train_Xts <- Xts[1:(split_num1-order), ]
train_Yts <- Yts[1:(split_num1-order), ]
test_Xts <- Xts[(nrow(train_Xts)+1):nrow(Xts), ]
test_Yts <- Yts[(nrow(train_Yts)+1):nrow(Yts), ]

# for partial envelope model, further divide train_Xts and test_Xts into two parts
train_Xts1 <- train_Xts[, 1:ncol(Yts)]
train_Xts2 <- train_Xts[, (ncol(Yts)+1):ncol(Xts)]
test_Xts1 <- test_Xts[, 1:ncol(Yts)]
test_Xts2 <- test_Xts[, (ncol(Yts)+1):ncol(Xts)]


# envelope model 
X=train_Xts
Y=train_Yts
# get envelope dimension u
u_results=u.env(X, Y, alpha = 0.01)
u=u_results$u.bic
# envelope model 
varenv_results <- env(X, Y, u, asy=TRUE)

# sequentially predict test data by updating model 
env_pred_results <- predict.env(varenv_results, test_Xts[1,], "prediction")
env_pred_values <- t(env_pred_results$value)
env_pred_SE <- env_pred_results$SE
env_Xts <- train_Xts
env_Yts <- train_Yts

for (i in 1:(nrow(test_Xts)-1))
{
  env_Xts = rbind(env_Xts, test_Xts[i, ])
  env_Yts = rbind(env_Yts, test_Yts[i, ])
  varenv_results <- env(X=env_Xts, Y=env_Yts, u, asy=TRUE)
  env_pred_results <- predict.env(varenv_results, test_Xts[i+1, ], "prediction")
  env_pred_values <- rbind(env_pred_values, t(env_pred_results$value))
  env_pred_SE <- rbind(env_pred_SE, env_pred_results$SE)
}

# get squared mean error between predicted value and test value
env_mean_square_error = sqrt(mean ((env_pred_values - test_Yts)^2))


# partial envelope model 
X1=train_Xts1
X2=train_Xts2
Y=train_Yts

# get partial envelope dimension u
u_results=u.penv(X1, X2, Y, alpha = 0.01)
u=u_results$u.bic

# build partial envelope model
varpenv_results <- penv(X1, X2, Y, u, asy=TRUE)

# Sequentially predict test data by updating model
penv_pred_results <- predict.penv(varpenv_results, test_Xts1[1,], test_Xts2[1,], "prediction")
penv_pred_values <- t(penv_pred_results$value)
penv_pred_SE <- penv_pred_results$SE
penv_Xts1 <- train_Xts1
penv_Xts2 <- train_Xts2
penv_Yts <- train_Yts


for (i in 1:(nrow(test_Xts1)-1))
{
  penv_Xts1 = rbind(penv_Xts1, test_Xts1[i, ])
  penv_Xts2 = rbind(penv_Xts2, test_Xts2[i, ])
  penv_Yts = rbind(penv_Yts, test_Yts[i, ])
  varpenv_results <- penv(X1=penv_Xts1, X2=penv_Xts2, Y=penv_Yts, u=1, asy=TRUE)
  penv_pred_results <- predict.penv(varpenv_results, test_Xts1[i+1, ], test_Xts2[i+1, ], "prediction")
  penv_pred_values <- rbind(penv_pred_values, t(penv_pred_results$value))
  penv_pred_SE <- rbind(penv_pred_SE, penv_pred_results$SE)
}

# get predication error 
penv_mean_square_error = sqrt (mean ((penv_pred_values - test_Yts)^2))
